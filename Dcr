Sure! Hereâ€™s how to modify the Terraform configuration to allow for creating multiple Data Collection Rules (DCR) and specify associated Log Analytics Workspaces (LAW) for each DCR.

1. Modify DCR Module: variables.tf

Update the variables to accept multiple DCR configurations and associated Log Analytics workspace IDs.

# dcr_module/variables.tf

variable "dcr_configs" {
  description = "A list of DCR configurations, each with a name, resource group, location, and associated Log Analytics workspace ID."
  type = list(object({
    dcr_name                    = string
    resource_group_name         = string
    location                    = string
    log_analytics_workspace_id   = string
    resource_group_vm_ids       = map(list(string))
  }))
}

2. Modify DCR Module: main.tf

Iterate over the DCR configurations to create each DCR and associate the VMs.

# dcr_module/main.tf

resource "azurerm_monitor_data_collection_rule" "example" {
  for_each = { for dcr in var.dcr_configs : dcr.dcr_name => dcr }

  name                = each.value.dcr_name
  resource_group_name = each.value.resource_group_name
  location            = each.value.location

  data_source {
    performance_counter {
      counter_specifications {
        counter_name = "\\Processor(_Total)\\% Processor Time"
        sampling_frequency_in_seconds = 60
        unit = "Percent"
      }
      counter_specifications {
        counter_name = "\\Memory\\Available Bytes"
        sampling_frequency_in_seconds = 60
        unit = "Bytes"
      }
      counter_specifications {
        counter_name = "\\LogicalDisk(_Total)\\% Free Space"
        sampling_frequency_in_seconds = 60
        unit = "Percent"
      }
    }
  }

  destination {
    log_analytics {
      workspace_resource_id = each.value.log_analytics_workspace_id
    }
  }
}

resource "azurerm_monitor_data_collection_rule_association" "vm_dcr_association" {
  for_each = { for dcr in var.dcr_configs : dcr.dcr_name => dcr }

  data_collection_rule_id = azurerm_monitor_data_collection_rule.example[each.key].id

  dynamic "association" {
    for_each = flatten([for rg, vm_ids in each.value.resource_group_vm_ids : [for vm_id in vm_ids : { rg = rg, vm_id = vm_id }]])
    content {
      resource_id = association.value.vm_id
    }
  }
}

3. Root Module: main.tf

Use the modified DCR module in your root Terraform configuration.

# main.tf

provider "azurerm" {
  features {}
}

module "dcr_setup" {
  source = "./dcr_module"

  dcr_configs = var.dcr_configs
}

4. Root Module: terraform.tfvars

Define multiple DCR configurations and their associated parameters.

# terraform.tfvars

dcr_configs = [
  {
    dcr_name                  = "dcr1"
    resource_group_name       = "dcr-resource-group-1"
    location                  = "West Europe"
    log_analytics_workspace_id = "/subscriptions/YOUR_SUBSCRIPTION_ID/resourceGroups/YOUR_RG/providers/Microsoft.OperationalInsights/workspaces/YOUR_WORKSPACE_1"
    resource_group_vm_ids     = {
      "rg1" = ["vm1_id", "vm2_id"]
      "rg2" = ["vm3_id"]
    }
  },
  {
    dcr_name                  = "dcr2"
    resource_group_name       = "dcr-resource-group-2"
    location                  = "East US"
    log_analytics_workspace_id = "/subscriptions/YOUR_SUBSCRIPTION_ID/resourceGroups/YOUR_RG/providers/Microsoft.OperationalInsights/workspaces/YOUR_WORKSPACE_2"
    resource_group_vm_ids     = {
      "rg3" = ["vm4_id", "vm5_id"]
    }
  }
]

Summary of Changes

1. Updated Variables: The module now accepts a list of DCR configurations, allowing for multiple DCRs, each associated with a specific Log Analytics workspace.


2. Iterate Over Configurations: The DCR creation and VM association now iterate over the provided configurations.


3. Flexible Configuration: You can specify different locations and Log Analytics workspaces for each DCR.



This setup provides a flexible way to manage multiple Data Collection Rules while allowing different VMs in various resource groups to be monitored under distinct configurations. If you have any questions or need further modifications, feel free to ask!

