I'll modify the configuration to use `for_each` for more dynamic and flexible resource management.

```hcl
# modules/data-collection-rule/variables.tf
variable "dcr_configs" {
  description = "Map of Data Collection Rule configurations"
  type = map(object({
    resource_group_name = string
    location            = string
    platform_type       = string # "Windows" or "Linux"
    
    # VM Resource Group for association
    vm_resource_group_name = string
    
    performance_counters = object({
      cpu_enabled     = bool
      memory_enabled  = bool
      disk_enabled    = bool
      network_enabled = bool
    })
    
    tags = map(string)
  }))
}

# modules/data-collection-rule/main.tf
resource "azurerm_monitor_data_collection_rule" "dcr" {
  for_each            = var.dcr_configs
  name                = each.key
  resource_group_name = each.value.resource_group_name
  location            = each.value.location

  destinations {
    azure_monitor_metrics {
      name = "azureMonitorMetrics"
    }
  }

  data_flow {
    streams      = ["Microsoft-Perf"]
    destinations = ["azureMonitorMetrics"]
  }

  dynamic "performance_counter" {
    for_each = each.value.performance_counters.cpu_enabled ? [1] : []
    content {
      streams = ["Microsoft-Perf"]
      sampling_frequency_in_seconds = 60
      counter_specifiers = [
        "\\Processor(_Total)\\% Processor Time",
        "\\Processor(_Total)\\% User Time"
      ]
      name = "CPUCounters"
    }
  }

  dynamic "performance_counter" {
    for_each = each.value.performance_counters.memory_enabled ? [1] : []
    content {
      streams = ["Microsoft-Perf"]
      sampling_frequency_in_seconds = 60
      counter_specifiers = [
        "\\Memory\\Available MBytes",
        "\\Memory\\% Committed Bytes In Use"
      ]
      name = "MemoryCounters"
    }
  }

  dynamic "performance_counter" {
    for_each = each.value.performance_counters.disk_enabled ? [1] : []
    content {
      streams = ["Microsoft-Perf"]
      sampling_frequency_in_seconds = 60
      counter_specifiers = [
        "\\PhysicalDisk(_Total)\\Avg. Disk Read Queue Length",
        "\\PhysicalDisk(_Total)\\Avg. Disk Write Queue Length"
      ]
      name = "DiskCounters"
    }
  }

  dynamic "performance_counter" {
    for_each = each.value.performance_counters.network_enabled ? [1] : []
    content {
      streams = ["Microsoft-Perf"]
      sampling_frequency_in_seconds = 60
      counter_specifiers = [
        "\\Network Interface(*)\\Bytes Received/sec",
        "\\Network Interface(*)\\Bytes Sent/sec"
      ]
      name = "NetworkCounters"
    }
  }

  # Platform-specific configuration
  dynamic "windows_event_log" {
    for_each = each.value.platform_type == "Windows" ? [1] : []
    content {
      streams = ["Microsoft-Event"]
      x_path_query = ["Application!*[System[(Level=1 or Level=2 or Level=3)]]"]
      event_log_name = "Application"
    }
  }

  dynamic "linux_syslog" {
    for_each = each.value.platform_type == "Linux" ? [1] : []
    content {
      streams = ["Microsoft-Syslog"]
      facility_names = ["*"]
      log_levels     = ["Debug", "Info", "Notice", "Warning", "Error", "Critical", "Alert", "Emergency"]
    }
  }

  tags = each.value.tags
}

# Data source to fetch VMs in the specified resource group
data "azurerm_virtual_machines" "target_vms" {
  for_each            = var.dcr_configs
  resource_group_name = each.value.vm_resource_group_name
}

# Create Data Collection Rule associations
resource "azurerm_monitor_data_collection_rule_association" "vm_dcr_association" {
  for_each                   = var.dcr_configs
  name                       = "dcr-association-${each.key}"
  target_resource_id         = "/subscriptions/${data.azurerm_subscription.current.subscription_id}/resourceGroups/${each.value.vm_resource_group_name}"
  data_collection_rule_id    = azurerm_monitor_data_collection_rule.dcr[each.key].id
  description                = "Association for VMs in ${each.value.vm_resource_group_name}"
}

# Fetch current subscription details
data "azurerm_subscription" "current" {}

# modules/data-collection-rule/outputs.tf
output "dcr_ids" {
  description = "Map of created Data Collection Rule IDs"
  value       = { for k, v in azurerm_monitor_data_collection_rule.dcr : k => v.id }
}

output "dcr_association_ids" {
  description = "Map of created Data Collection Rule Association IDs"
  value       = { for k, v in azurerm_monitor_data_collection_rule_association.vm_dcr_association : k => v.id }
}

# root/variables.tf
variable "dcr_configs" {
  description = "Map of Data Collection Rule configurations"
  type = map(object({
    resource_group_name = string
    location            = string
    platform_type       = string
    vm_resource_group_name = string
    
    performance_counters = object({
      cpu_enabled     = bool
      memory_enabled  = bool
      disk_enabled    = bool
      network_enabled = bool
    })
    
    tags = map(string)
  }))
}

# root/terraform.tfvars
dcr_configs = {
  production-windows-dcr = {
    resource_group_name     = "rg-monitoring-prod"
    location                = "eastus"
    platform_type           = "Windows"
    vm_resource_group_name  = "rg-vms-prod"
    
    performance_counters = {
      cpu_enabled     = true
      memory_enabled  = true
      disk_enabled    = true
      network_enabled = true
    }
    
    tags = {
      Environment = "Production"
      Monitoring  = "Enabled"
      Department  = "IT"
    }
  },
  
  staging-linux-dcr = {
    resource_group_name     = "rg-monitoring-staging"
    location                = "westeurope"
    platform_type           = "Linux"
    vm_resource_group_name  = "rg-vms-staging"
    
    performance_counters = {
      cpu_enabled     = true
      memory_enabled  = true
      disk_enabled    = true
      network_enabled = true
    }
    
    tags = {
      Environment = "Staging"
      Monitoring  = "Enabled"
      Department  = "DevOps"
    }
  }
}

# root/main.tf (unchanged)
module "data_collection_rules" {
  source = "./modules/data-collection-rule"
  
  dcr_configs = var.dcr_configs
}

```

Key modifications with `for_each`:

1. Changed variable type from `list` to `map` in both module and root variables
2. Updated `terraform.tfvars` to use a map instead of a list
3. Replaced `count` with `for_each` in:
   - `azurerm_monitor_data_collection_rule`
   - `azurerm_virtual_machines`
   - `azurerm_monitor_data_collection_rule_association`
4. Updated outputs to use `for` expressions to create maps

Benefits of using `for_each`:
- More explicit naming of resources
- Easier to add/remove configurations
- Better state management
- More readable and maintainable code

The functionality remains the same:
- Automatically associates DCRs with VMs in specified resource groups
- Supports different performance counter and platform configurations
- Flexible tagging

To use this configuration:
1. Ensure Azure provider is configured
2. Authenticate with Azure
3. Customize `terraform.tfvars`
4. Run `terraform init`
5. Run `terraform plan`
6. Run `terraform apply`

Advantages over previous implementation:
- Uses unique keys for each DCR configuration
- Easier to reference specific configurations
- More intuitive resource management

Would you like me to elaborate on any aspect of the configuration or make any specific adjustments?
