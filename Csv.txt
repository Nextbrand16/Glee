I'll help you create a PowerShell script that generates CSV output from the existing system information script. I'll create a modified version that exports to CSV format.



```powershell
# Function to format object for CSV
function Format-ForCSV {
    param (
        [Parameter(Mandatory=$true)]
        [object]$InputObject,
        [string]$Prefix = ""
    )
    
    $properties = @()
    
    foreach ($property in $InputObject.PSObject.Properties) {
        $value = $property.Value
        
        # Handle nested objects and arrays
        if ($value -is [System.Collections.IDictionary] -or $value.PSObject.Properties) {
            $nestedProperties = Format-ForCSV -InputObject $value -Prefix "${Prefix}${property.Name}_"
            $properties += $nestedProperties
        }
        elseif ($value -is [System.Collections.IList] -and $value.Count -gt 0) {
            $value = $value -join "; "
            $properties += [PSCustomObject]@{
                Name = "${Prefix}${property.Name}"
                Value = $value
            }
        }
        else {
            $properties += [PSCustomObject]@{
                Name = "${Prefix}${property.Name}"
                Value = $value
            }
        }
    }
    
    return $properties
}

# Function to get all system information and format for CSV
function Get-SystemInfoForCSV {
    param (
        [Parameter(Mandatory=$true)]
        [string]$HostName
    )
    
    # Collect all information using existing functions
    $systemInfo = [ordered]@{
        "DomainMembership" = Check-DomainMembership -ComputerName $HostName
        "SCCMAgent" = Check-SCCMAgent -ComputerName $HostName
        "ComputerOU" = Get-ComputerOU -ComputerName $HostName
        "DriveInfo" = Get-DriveInfo -ComputerName $HostName
        "HostSpecs" = Get-HostSpecs -ComputerName $HostName
        "LocalGroups" = Get-LocalGroupMembers -ComputerName $HostName
        "DateTime" = Get-DateTimeInfo -ComputerName $HostName
        "WindowsDefender" = Check-WindowsDefenderTraffic -ComputerName $HostName
        "CarbonBlack" = Check-CarbonBlackAgent -ComputerName $HostName
        "SplunkForwarder" = Check-SplunkForwarder -ComputerName $HostName
        "JEADiscovery" = Check-JEADiscovery -ComputerName $HostName
        "RemoteConnectivity" = Test-RemoteConnectivity -ComputerName $HostName
    }
    
    # Create CSV record
    $csvData = [PSCustomObject]@{
        Hostname = $HostName
        Timestamp = (Get-Date -Format "yyyy-MM-dd HH:mm:ss")
    }
    
    # Format all collected data for CSV
    $flatProperties = Format-ForCSV -InputObject $systemInfo
    
    # Add all properties to the CSV record
    foreach ($prop in $flatProperties) {
        $csvData | Add-Member -NotePropertyName $prop.Name -NotePropertyValue $prop.Value
    }
    
    return $csvData
}

# Set the hostname and export paths
$HostName = "RemoteServerName"  # Replace with actual remote server name
$csvPath = "C:\Reports\SystemReport.csv"

# Generate and export the CSV report
$csvReport = Get-SystemInfoForCSV -HostName $HostName
$csvReport | Export-Csv -Path $csvPath -NoTypeInformation
Write-Host "CSV report generated at: $csvPath"

```

This script modifies the original code to generate CSV output. Here are the key changes and features:

1. Added a `Format-ForCSV` function that:
   - Flattens nested objects and arrays into CSV-compatible format
   - Handles complex data structures by creating properly formatted column names
   - Joins array values with semicolons for CSV compatibility

2. Created a `Get-SystemInfoForCSV` function that:
   - Collects all system information using the original functions
   - Formats the data for CSV output
   - Includes hostname and timestamp in each record

3. The output CSV will include columns for:
   - Basic system information
   - Drive information with separate columns for each drive
   - Host specifications
   - Security agent status
   - Network connectivity results
   - Local group memberships
   - And more

To use this script:

1. Keep all the original functions from your provided script
2. Add this new code at the end
3. Replace "RemoteServerName" with your actual target hostname
4. Run the script to generate a CSV file

The CSV format makes it easy to:
- Import the data into Excel or other analysis tools
- Compare system information across multiple machines
- Create reports and dashboards
- Perform data analysis on the collected information

Would you like me to modify any part of the CSV export functionality or add additional fields to the output?
