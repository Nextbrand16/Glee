You're right to question that—using resource groups as the scope might not be the most efficient approach, depending on the actual use case. The intent was to create alerts for VMs within specific resource groups, but if you're targeting individual virtual machines (VMs) or VM scale sets instead, it would be better to directly use VM resource IDs or similar resources rather than resource groups.

Let's adjust the code to scope the alerts to individual VMs instead of resource groups, which would likely be more relevant in a VM monitoring scenario.


---

Updated Module: vm_alerts

Here, we'll scope the alerts directly to virtual machine resource IDs. This way, you're setting up alerts for specific VMs instead of the whole resource group.

1. Folder Structure:

vm_alerts/
  ├── main.tf
  ├── variables.tf




---

vm_alerts/main.tf (Module Logic)

resource "azurerm_monitor_metric_alert" "cpu_alert" {
  for_each = var.vm_ids

  name                = "cpu-alert-${each.key}"
  resource_group_name = var.resource_group_name
  scopes              = [each.value]  # Scope the alert to the VM resource ID
  description         = "Alert when CPU usage is greater than ${var.cpu_alert_criteria.threshold}% for the VM"
  frequency           = var.cpu_alert_criteria.frequency
  window_size         = var.cpu_alert_criteria.window_size
  severity            = var.cpu_alert_criteria.severity

  criteria {
    metric_namespace = var.cpu_alert_criteria.metric_namespace
    metric_name      = var.cpu_alert_criteria.metric_name
    aggregation      = var.cpu_alert_criteria.aggregation
    operator         = var.cpu_alert_criteria.operator
    threshold        = var.cpu_alert_criteria.threshold
  }

  dynamic "action" {
    for_each = var.alert_action_group_ids
    content {
      action_group_id = action.value
    }
  }
}

resource "azurerm_monitor_metric_alert" "disk_space_alert" {
  for_each = var.vm_ids

  name                = "disk-space-alert-${each.key}"
  resource_group_name = var.resource_group_name
  scopes              = [each.value]  # Scope the alert to the VM resource ID
  description         = "Alert when disk usage is greater than ${var.disk_alert_criteria.threshold}% for the VM"
  frequency           = var.disk_alert_criteria.frequency
  window_size         = var.disk_alert_criteria.window_size
  severity            = var.disk_alert_criteria.severity

  criteria {
    metric_namespace = var.disk_alert_criteria.metric_namespace
    metric_name      = var.disk_alert_criteria.metric_name
    aggregation      = var.disk_alert_criteria.aggregation
    operator         = var.disk_alert_criteria.operator
    threshold        = var.disk_alert_criteria.threshold
  }

  dynamic "action" {
    for_each = var.alert_action_group_ids
    content {
      action_group_id = action.value
    }
  }
}

resource "azurerm_monitor_metric_alert" "memory_alert" {
  for_each = var.vm_ids

  name                = "memory-alert-${each.key}"
  resource_group_name = var.resource_group_name
  scopes              = [each.value]  # Scope the alert to the VM resource ID
  description         = "Alert when memory usage is greater than ${var.memory_alert_criteria.threshold}% for the VM"
  frequency           = var.memory_alert_criteria.frequency
  window_size         = var.memory_alert_criteria.window_size
  severity            = var.memory_alert_criteria.severity

  criteria {
    metric_namespace = var.memory_alert_criteria.metric_namespace
    metric_name      = var.memory_alert_criteria.metric_name
    aggregation      = var.memory_alert_criteria.aggregation
    operator         = var.memory_alert_criteria.operator
    threshold        = var.memory_alert_criteria.threshold
  }

  dynamic "action" {
    for_each = var.alert_action_group_ids
    content {
      action_group_id = action.value
    }
  }
}

resource "azurerm_monitor_metric_alert" "power_off_alert" {
  for_each = var.vm_ids

  name                = "power-off-alert-${each.key}"
  resource_group_name = var.resource_group_name
  scopes              = [each.value]  # Scope the alert to the VM resource ID
  description         = "Alert when the VM is powered off"
  frequency           = var.power_off_alert_criteria.frequency
  window_size         = var.power_off_alert_criteria.window_size
  severity            = var.power_off_alert_criteria.severity

  criteria {
    metric_namespace = var.power_off_alert_criteria.metric_namespace
    metric_name      = var.power_off_alert_criteria.metric_name
    aggregation      = var.power_off_alert_criteria.aggregation
    operator         = var.power_off_alert_criteria.operator
    threshold        = var.power_off_alert_criteria.threshold
  }

  dynamic "action" {
    for_each = var.alert_action_group_ids
    content {
      action_group_id = action.value
    }
  }
}

vm_alerts/variables.tf

variable "resource_group_name" {
  description = "The name of the resource group where the VMs are located"
  type        = string
}

variable "vm_ids" {
  description = "A map of VM resource IDs"
  type        = map(string)
}

variable "alert_action_group_ids" {
  description = "A list of action group IDs to which alerts will send notifications"
  type        = list(string)
}

variable "cpu_alert_criteria" {
  type = object({
    frequency           = string
    window_size         = string
    severity            = number
    metric_namespace    = string
    metric_name         = string
    aggregation         = string
    operator            = string
    threshold           = number
  })
  description = "Criteria for CPU alerts"
}

variable "disk_alert_criteria" {
  type = object({
    frequency           = string
    window_size         = string
    severity            = number
    metric_namespace    = string
    metric_name         = string
    aggregation         = string
    operator            = string
    threshold           = number
  })
  description = "Criteria for Disk Space alerts"
}

variable "memory_alert_criteria" {
  type = object({
    frequency           = string
    window_size         = string
    severity            = number
    metric_namespace    = string
    metric_name         = string
    aggregation         = string
    operator            = string
    threshold           = number
  })
  description = "Criteria for Memory alerts"
}

variable "power_off_alert_criteria" {
  type = object({
    frequency           = string
    window_size         = string
    severity            = number
    metric_namespace    = string
    metric_name         = string
    aggregation         = string
    operator            = string
    threshold           = number
  })
  description = "Criteria for Power-Off alerts"
}


---

Root Module

1. Folder Structure:

root/
  ├── main.tf
  ├── terraform.tfvars



root/main.tf (Root Configuration)

provider "azurerm" {
  features {}
}

module "vm_alerts" {
  source = "../vm_alerts"  # Reference to the module

  resource_group_name     = var.resource_group_name
  vm_ids                  = var.vm_ids
  alert_action_group_ids  = var.alert_action_group_ids
  cpu_alert_criteria      = var.cpu_alert_criteria
  disk_alert_criteria     = var.disk_alert_criteria
  memory_alert_criteria   = var.memory_alert_criteria
  power_off_alert_criteria = var.power_off_alert_criteria
}

root/terraform.tfvars

resource_group_name = "my-resource-group"

vm_ids = {
  "vm1" = "/subscriptions/YOUR_SUBSCRIPTION_ID/resourceGroups/my-resource-group/providers/Microsoft.Compute/virtualMachines/vm1"
  "vm2" = "/subscriptions/YOUR_SUBSCRIPTION_ID/resourceGroups/my-resource-group/providers/Microsoft.Compute/virtualMachines/vm2"
}

alert_action_group_ids = [
  "/subscriptions/YOUR_SUBSCRIPTION_ID/resourceGroups/alert-rg/providers/microsoft.insights/actionGroups/YOUR_ACTION_GROUP_1",
  "/subscriptions/YOUR_SUBSCRIPTION_ID/resourceGroups/alert-rg/providers/microsoft.insights/actionGroups/YOUR_ACTION_GROUP_2"
]

# CPU alert criteria
cpu_alert_criteria = {
  frequency        = "PT1M"
  window_size      = "PT5M"
  severity         = 2
  metric_namespace = "Microsoft.Compute/virtualMachines"
  metric_name      = "Percentage CPU"
  aggregation      = "Average"
  operator         = "GreaterThan"
  threshold        = 80
}

# Disk space alert criteria
disk_alert_criteria = {
  frequency        = "PT1M"
  window_size      = "PT5M"
  severity         = 2
  metric_namespace = "Microsoft.Compute/virtualMachines"
  metric_name      = "Percentage Disk Used"
  aggregation      = "Average"
  operator         = "GreaterThan"
  threshold        = 90
}

# Memory alert criteria
memory_alert_criteria = {
  frequency        = "PT1M"
  window_size      = "PT5M"
  severity         = 2
  metric_namespace = "Microsoft.Compute/virtualMachines"
  metric_name      = "Available Memory"
  aggregation      = "Average"
  operator         = "LessThan"
  threshold        = 10  # Adjust this based on the percentage threshold for low memory
}

# Power-off alert criteria
power_off_alert_criteria = {
  frequency        = "PT1M"
  window_size      = "PT5M"
  severity         = 2
  metric_namespace = "Microsoft.Compute/virtualMachines"
  metric_name      = "Power Off"
  aggregation      = "Total"
  operator         = "Equals"
  threshold        = 1
}
