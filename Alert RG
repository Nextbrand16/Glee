Below is the revised modularized configuration that splits the CPU alert and the Power Off alert for Action Group 1.


---

Module Code (modules/azure_monitor/)

Action Groups Module (modules/azure_monitor/action_groups.tf)

resource "azurerm_monitor_action_group" "this" {
  for_each = var.action_groups

  name                = each.value.name
  resource_group_name = each.value.resource_group_name
  short_name          = each.value.short_name

  dynamic "email_receiver" {
    for_each = each.value.email_receivers
    content {
      name          = email_receiver.value.name
      email_address = email_receiver.value.email
    }
  }

  tags = each.value.tags
}

Metric Alerts Module (modules/azure_monitor/metric_alerts.tf)

resource "azurerm_monitor_metric_alert" "this" {
  for_each = var.metric_alerts

  name                = each.value.name
  resource_group_name = each.value.resource_group_name
  scopes              = each.value.scopes
  description         = each.value.description
  frequency           = each.value.frequency
  window_size         = each.value.window_size
  severity            = each.value.severity

  dynamic "criteria" {
    for_each = each.value.criteria
    content {
      metric_namespace = criteria.value.metric_namespace
      metric_name      = criteria.value.metric_name
      aggregation      = criteria.value.aggregation
      operator         = criteria.value.operator
      threshold        = criteria.value.threshold
    }
  }

  dynamic "action" {
    for_each = each.value.action_group_ids
    content {
      action_group_id = azurerm_monitor_action_group.this[action.value].id
    }
  }

  tags = each.value.tags
}

Scheduled Query Rules Module (modules/azure_monitor/scheduled_query_rules.tf)

resource "azurerm_monitor_scheduled_query_rules_alert" "this" {
  for_each = var.scheduled_query_rules

  name                = each.value.name
  resource_group_name = each.value.resource_group_name
  description         = each.value.description
  frequency           = each.value.frequency
  severity            = each.value.severity

  data_source_id = each.value.data_source_id  # Log Analytics Workspace ID

  dynamic "action" {
    for_each = each.value.action_group_ids
    content {
      action_group_id = azurerm_monitor_action_group.this[action.value].id
    }
  }

  query = each.value.query

  tags = each.value.tags
}


---

Variables for Module (modules/azure_monitor/variables.tf)

# Action Groups Variable
variable "action_groups" {
  type = map(object({
    name                = string
    resource_group_name = string
    short_name          = string
    email_receivers = list(object({
      name  = string
      email = string
    }))
    tags = map(string)
  }))
}

# Metric Alerts Variable
variable "metric_alerts" {
  type = map(object({
    name                = string
    resource_group_name = string
    scopes              = list(string)
    description         = string
    frequency           = string
    window_size         = string
    severity            = number
    criteria = list(object({
      metric_namespace = string
      metric_name      = string
      aggregation      = string
      operator         = string
      threshold        = number
    }))
    action_group_ids = list(string)
    tags             = map(string)
  }))
}

# Scheduled Query Rules Variable
variable "scheduled_query_rules" {
  type = map(object({
    name                = string
    resource_group_name = string
    description         = string
    frequency           = string
    severity            = number
    data_source_id      = string  # Log Analytics Workspace ID
    query               = string
    action_group_ids    = list(string)
    tags                = map(string)
  }))
}


---

Root Module (main.tf)

module "azure_monitor" {
  source = "./modules/azure_monitor"

  action_groups         = var.action_groups
  metric_alerts         = var.metric_alerts
  scheduled_query_rules = var.scheduled_query_rules
}


---

Variables for Root Module (variables.tf)

variable "action_groups" {
  description = "Action groups configuration"
  type = map(object({
    name                = string
    resource_group_name = string
    short_name          = string
    email_receivers = list(object({
      name  = string
      email = string
    }))
    tags = map(string)
  }))
}

variable "metric_alerts" {
  description = "Metric alerts configuration"
  type = map(object({
    name                = string
    resource_group_name = string
    scopes              = list(string)
    description         = string
    frequency           = string
    window_size         = string
    severity            = number
    criteria = list(object({
      metric_namespace = string
      metric_name      = string
      aggregation      = string
      operator         = string
      threshold        = number
    }))
    action_group_ids = list(string)
    tags             = map(string)
  }))
}

variable "scheduled_query_rules" {
  description = "Scheduled query rules configuration"
  type = map(object({
    name                = string
    resource_group_name = string
    description         = string
    frequency           = string
    severity            = number
    data_source_id      = string
    query               = string
    action_group_ids    = list(string)
    tags                = map(string)
  }))
}


---

Root Module Input (terraform.tfvars)

In the tfvars, we now split the CPU alert and Power Off alert for Action Group 1.

action_groups = {
  "group1" = {
    name                = "ActionGroup1"
    resource_group_name = "rg1"
    short_name          = "AG1"
    email_receivers = [
      {
        name  = "Admin1"
        email = "admin1@example.com"
      },
      {
        name  = "Admin2"
        email = "admin2@example.com"
      }
    ]
    tags = {
      Environment = "Production"
    }
  },
  "group2" = {
    name                = "ActionGroup2"
    resource_group_name = "rg2"
    short_name          = "AG2"
    email_receivers = [
      {
        name  = "Admin3"
        email = "admin3@example.com"
      },
      {
        name  = "Admin4"
        email = "admin4@example.com"
      }
    ]
    tags = {
      Environment = "Development"
    }
  }
}

metric_alerts = {
  # CPU Alert for Action Group 1
  "cpu_alert" = {
    name                = "MetricAlert_CPU"
    resource_group_name = "rg1"
    scopes              = ["/subscriptions/<subscription_id>/resourceGroups/rg1"]
    description         = "Alert for CPU utilization"
    frequency           = "PT5M"
    window_size         = "PT10M"
    severity            = 2
    criteria = [
      {
        metric_namespace = "Microsoft.Compute/virtualMachines"
        metric_name      = "Percentage CPU"
        aggregation      = "Average"
        operator         = "GreaterThan"
        threshold        = 80
      }
    ]
    action_group_ids = ["group1"]
    tags = {
      Environment = "Production"
    }
  },
  
  # Power Off Alert for Action Group 1
  "poweroff_alert" = {
    name                = "MetricAlert_PowerOff"
    resource_group_name = "rg1"
    scopes              = ["/subscriptions/<subscription_id>/resourceGroups/rg1"]
    description         = "Alert for Power Off event"
    frequency           = "PT5M"
    window_size         = "PT10M"
    severity            = 3
    criteria = [
      {
        metric_namespace = "Microsoft.Compute/virtualMachines"
        metric_name      = "Power Off"
        aggregation      = "Total"
        operator         = "GreaterThan"
        threshold        = 1
      }
    ]
    action_group_ids = ["group1"]
    tags = {
      Environment = "Production"
    }
  },
  
  # Disk Space Alert for Action Group 2
  "disk_alert" = {
    name                = "MetricAlert_DiskSpace"
    resource_group_name = "rg2"
    scopes              = ["/subscriptions/<subscription_id>/resourceGroups/rg2"]
    description         = "Alert for Disk Space utilization"
    frequency           = "PT10M"
    window_size         = "PT15M"
    severity            = 3
    criteria = [
      {
        metric_namespace = "Microsoft.Compute/virtualMachines"
        metric_name      = "Disk Read Operations/Sec"
        aggregation      = "Average"
        operator         = "GreaterThan"
        threshold        = 100
      }
    ]
    action_group_ids = ["group2"]
    tags = {
      Environment = "Development"
    }
  }
}

scheduled_query_rules = {
  # Scheduled query rule for disk monitoring
  "query_rule1" = {
    name                = "QueryRule1"
    resource_group_name = "rg1"
    description         = "Monitor disk usage"
    frequency           = "PT5M"
    severity            = 2
    data_source_id      = "/subscriptions/<subscription_id>/resourceGroups/rg1/providers/Microsoft.OperationalInsights/workspaces/log-analytics-id"
    query               = <<QUERY
      Perf
      | where ObjectName == "LogicalDisk" and CounterName == "% Free Space"
      | summarize avg(CounterValue) by bin(TimeGenerated, 5m), Computer
    QUERY
    action_group_ids    = ["group1"]
    tags = {
      Environment = "Production"
    }
  }
}
