Sure! Below is how you can split the provided code into a module and a root module for better organization. The module will handle the alert logic, and the root module will call the module and pass in the necessary variables through the tfvars file.

Module: vm_alerts

1. Folder Structure:

vm_alerts/
  ├── main.tf
  ├── variables.tf
  ├── outputs.tf (if needed)




---

vm_alerts/main.tf (Module Logic)

resource "azurerm_monitor_metric_alert" "cpu_alert" {
  for_each = var.resource_groups

  name                = "cpu-alert-${each.key}"
  resource_group_name = each.value
  scopes              = [azurerm_resource_group.main[each.key].id] 
  description         = "Alert when CPU usage is greater than ${var.cpu_alert_criteria.threshold}% for any VM in the resource group"
  frequency           = var.cpu_alert_criteria.frequency
  window_size         = var.cpu_alert_criteria.window_size
  severity            = var.cpu_alert_criteria.severity
  criteria {
    metric_namespace = var.cpu_alert_criteria.metric_namespace
    metric_name      = var.cpu_alert_criteria.metric_name
    aggregation      = var.cpu_alert_criteria.aggregation
    operator         = var.cpu_alert_criteria.operator
    threshold        = var.cpu_alert_criteria.threshold
  }

  dynamic "action" {
    for_each = var.alert_action_group_ids
    content {
      action_group_id = action.value
    }
  }
}

resource "azurerm_monitor_metric_alert" "disk_space_alert" {
  for_each = var.resource_groups

  name                = "disk-space-alert-${each.key}"
  resource_group_name = each.value
  scopes              = [azurerm_resource_group.main[each.key].id]
  description         = "Alert when disk usage is greater than ${var.disk_alert_criteria.threshold}% for any VM in the resource group"
  frequency           = var.disk_alert_criteria.frequency
  window_size         = var.disk_alert_criteria.window_size
  severity            = var.disk_alert_criteria.severity
  criteria {
    metric_namespace = var.disk_alert_criteria.metric_namespace
    metric_name      = var.disk_alert_criteria.metric_name
    aggregation      = var.disk_alert_criteria.aggregation
    operator         = var.disk_alert_criteria.operator
    threshold        = var.disk_alert_criteria.threshold
  }

  dynamic "action" {
    for_each = var.alert_action_group_ids
    content {
      action_group_id = action.value
    }
  }
}

resource "azurerm_monitor_metric_alert" "memory_alert" {
  for_each = var.resource_groups

  name                = "memory-alert-${each.key}"
  resource_group_name = each.value
  scopes              = [azurerm_resource_group.main[each.key].id]
  description         = "Alert when memory usage is greater than ${var.memory_alert_criteria.threshold}% for any VM in the resource group"
  frequency           = var.memory_alert_criteria.frequency
  window_size         = var.memory_alert_criteria.window_size
  severity            = var.memory_alert_criteria.severity
  criteria {
    metric_namespace = var.memory_alert_criteria.metric_namespace
    metric_name      = var.memory_alert_criteria.metric_name
    aggregation      = var.memory_alert_criteria.aggregation
    operator         = var.memory_alert_criteria.operator
    threshold        = var.memory_alert_criteria.threshold
  }

  dynamic "action" {
    for_each = var.alert_action_group_ids
    content {
      action_group_id = action.value
    }
  }
}

resource "azurerm_monitor_metric_alert" "power_off_alert" {
  for_each = var.resource_groups

  name                = "power-off-alert-${each.key}"
  resource_group_name = each.value
  scopes              = [azurerm_resource_group.main[each.key].id]
  description         = "Alert when any VM in the resource group is powered off"
  frequency           = var.power_off_alert_criteria.frequency
  window_size         = var.power_off_alert_criteria.window_size
  severity            = var.power_off_alert_criteria.severity
  criteria {
    metric_namespace = var.power_off_alert_criteria.metric_namespace
    metric_name      = var.power_off_alert_criteria.metric_name
    aggregation      = var.power_off_alert_criteria.aggregation
    operator         = var.power_off_alert_criteria.operator
    threshold        = var.power_off_alert_criteria.threshold
  }

  dynamic "action" {
    for_each = var.alert_action_group_ids
    content {
      action_group_id = action.value
    }
  }
}

vm_alerts/variables.tf

variable "resource_groups" {
  description = "A map of resource group names where the VMs are located"
  type        = map(string)
}

variable "alert_action_group_ids" {
  description = "A list of action group IDs to which alerts will send notifications"
  type        = list(string)
}

variable "cpu_alert_criteria" {
  type = object({
    frequency           = string
    window_size         = string
    severity            = number
    metric_namespace    = string
    metric_name         = string
    aggregation         = string
    operator            = string
    threshold           = number
  })
  description = "Criteria for CPU alerts"
}

variable "disk_alert_criteria" {
  type = object({
    frequency           = string
    window_size         = string
    severity            = number
    metric_namespace    = string
    metric_name         = string
    aggregation         = string
    operator            = string
    threshold           = number
  })
  description = "Criteria for Disk Space alerts"
}

variable "memory_alert_criteria" {
  type = object({
    frequency           = string
    window_size         = string
    severity            = number
    metric_namespace    = string
    metric_name         = string
    aggregation         = string
    operator            = string
    threshold           = number
  })
  description = "Criteria for Memory alerts"
}

variable "power_off_alert_criteria" {
  type = object({
    frequency           = string
    window_size         = string
    severity            = number
    metric_namespace    = string
    metric_name         = string
    aggregation         = string
    operator            = string
    threshold           = number
  })
  description = "Criteria for Power-Off alerts"
}


---

Root Module

1. Folder Structure:

root/
  ├── main.tf
  ├── terraform.tfvars



root/main.tf (Root Configuration)

provider "azurerm" {
  features {}
}

module "vm_alerts" {
  source = "../vm_alerts"  # Reference to the module

  resource_groups         = var.resource_groups
  alert_action_group_ids  = var.alert_action_group_ids
  cpu_alert_criteria      = var.cpu_alert_criteria
  disk_alert_criteria     = var.disk_alert_criteria
  memory_alert_criteria   = var.memory_alert_criteria
  power_off_alert_criteria = var.power_off_alert_criteria
}

root/terraform.tfvars

resource_groups = {
  "rg1" = "resource-group-1"
  "rg2" = "resource-group-2"
  "rg3" = "resource-group-3"
}

alert_action_group_ids = [
  "/subscriptions/YOUR_SUBSCRIPTION_ID/resourceGroups/alert-rg/providers/microsoft.insights/actionGroups/YOUR_ACTION_GROUP_1",
  "/subscriptions/YOUR_SUBSCRIPTION_ID/resourceGroups/alert-rg/providers/microsoft.insights/actionGroups/YOUR_ACTION_GROUP_2"
]

# CPU alert criteria
cpu_alert_criteria = {
  frequency        = "PT1M"
  window_size      = "PT5M"
  severity         = 2
  metric_namespace = "Microsoft.Compute/virtualMachines"
  metric_name      = "Percentage CPU"
  aggregation      = "Average"
  operator         = "GreaterThan"
  threshold        = 80
}

# Disk space alert criteria
disk_alert_criteria = {
  frequency        = "PT1M"
  window_size      = "PT5M"
  severity         = 2
  metric_namespace = "Microsoft.Compute/virtualMachines"
  metric_name      = "Percentage Disk Used"
  aggregation      = "Average"
  operator         = "GreaterThan"
  threshold        = 90
}

# Memory alert criteria
memory_alert_criteria = {
  frequency        = "PT1M"
  window_size      = "PT5M"
  severity         = 2
  metric_namespace = "Microsoft.Compute/virtualMachines"
  metric_name      = "Percentage Memory Used"
  aggregation      = "Average"
  operator         = "GreaterThan"
  threshold        = 90
}

# Power-off alert criteria
power_off_alert_criteria = {
  frequency        = "PT1M"
  window_size      = "PT5M"
  severity         = 2
  metric_namespace = "Microsoft.Compute/virtualMachines"
  metric_name      = "Power Off"
  aggregation      = "Total"
  operator         = "Equals"
  threshold        = 1
}


---

How the Split Works:

The vm_alerts module contains the actual alert logic (i.e., CPU, disk space, memory, and power-off alerts). The logic is parameterized by inputs (such as alert criteria and resource groups) provided by


